#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <PubSubClient.h>

const char* ssid = "";
const char* password =  "";
const char* mqttServer = " ";
const int mqttPort = 1883;
const char* mqttUser = "";
const char* mqttPassword = "";

String wiadomosc = "";
String temat = "";

int ledPin = D4;          //connect led pin to d4 and ground
int ledPin2 = D3;
int value = LOW;
int value2 = LOW;

WiFiClient espClient;
WiFiServer server(80);
PubSubClient MQTTclient(espClient);

void callback(char* topic, byte* payload, unsigned int length) {

  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  temat = topic;
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    wiadomosc = wiadomosc + (char)payload[i];
    Serial.print((char)payload[i]);
  }



  Serial.println();
  Serial.println("-----------------------");

}

void setup() {
  Serial.begin(115200);
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword((const char *)"123");

  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());


  MQTTclient.setServer(mqttServer, mqttPort);
  MQTTclient.setCallback(callback);

  while (!MQTTclient.connected()) {
    Serial.println("Connecting to MQTT...");

    if (MQTTclient.connect("ESP8266Client", mqttUser, mqttPassword )) {

      Serial.println("connected");

    } else {

      Serial.print("failed with state ");
      Serial.print(MQTTclient.state());
      delay(2000);

    }
  }

  // dolaczenie do grup MQTT

  MQTTclient.subscribe("out/duzy_tylne/command");
  MQTTclient.subscribe("out/duzy_boczne/command");

  // Deklaracja pinow

  delay(10);
  pinMode(ledPin, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  digitalWrite(ledPin, LOW);
  digitalWrite(ledPin2, LOW);

  // Start the server
  server.begin();
  Serial.println("Server started");

  // Print the IP address
  Serial.print("Use this URL : ");
  Serial.print("http://");
  Serial.print(WiFi.localIP());
  Serial.println("/");

}

void* cleanupZmiennych() {
  wiadomosc = "";
  temat = "";
}

void mqttMessage() {

  if (temat == "out/duzy_boczne/command")
  {
    if (wiadomosc == "ON") {
      digitalWrite(ledPin, HIGH);
      value = HIGH;
    }
    if (wiadomosc == "OFF") {
      digitalWrite(ledPin, LOW);
      value = LOW;
    }
  }
  if (temat == "out/duzy_tylne/command")
  {
    if (wiadomosc == "ON") {
      digitalWrite(ledPin2, HIGH);
      value2 = HIGH;
    }
    if (wiadomosc == "OFF") {
      digitalWrite(ledPin2, LOW);
      value2 = LOW;
    }
  }
  cleanupZmiennych();
}

void httpMessage() {
  // Check if a client has connected
  WiFiClient HTTPclient = server.available();
  if (!HTTPclient) {
    return;
  }

  // Wait until the HTTPclient sends some data
  Serial.println("new client");
  while (!HTTPclient.available()) {
    delay(1);
  }

  // Read the first line of the request
  String request = HTTPclient.readStringUntil('\r');
  Serial.println(request);
  HTTPclient.flush();

  // Match the request


  if (request.indexOf("/LED1=ON") != -1) {
    digitalWrite(ledPin, HIGH);
    value = HIGH;
    MQTTclient.publish("out/duzy_boczne/command", "ON");
  }
  if (request.indexOf("/LED1=OFF") != -1) {
    digitalWrite(ledPin, LOW);
    value = LOW;
    MQTTclient.publish("out/duzy_boczne/command", "OFF");
  }

  if (request.indexOf("/LED2=ON") != -1) {
    digitalWrite(ledPin2, HIGH);
    value2 = HIGH;
    MQTTclient.publish("out/duzy_tylne/command", "ON");
  }
  if (request.indexOf("/LED2=OFF") != -1) {
    digitalWrite(ledPin2, LOW);
    value2 = LOW;
    MQTTclient.publish("out/duzy_tylne/command", "OFF");
  }
  // Return the response
  HTTPclient.println("HTTP/1.1 200 OK");
  HTTPclient.println("Content-Type: text/html");
  HTTPclient.println(""); //  do not forget this one
  HTTPclient.println("<!DOCTYPE HTML>");
  HTTPclient.println("<html>");

  HTTPclient.print("Led pin is now: <br><br>");

  if (value == HIGH) {
    HTTPclient.print("Boczne: On <br>");
  } else {
    HTTPclient.print("Boczne: Off <br>");
  }
  if (value2 == HIGH) {
    HTTPclient.print("Tylne: On <br>");
  } else {
    HTTPclient.print("Tylne: Off <br>");
  }
  HTTPclient.println("</html>");

  delay(1);
  Serial.println("Client disconnected");
  Serial.println("");

  cleanupZmiennych();
}

void loop() {
  ArduinoOTA.handle();
  MQTTclient.loop();

  httpMessage();
  mqttMessage();
}